{"remainingRequest":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/marceline/Dropbox/ssnull/vue-apps/students/src/components/schoolYears.vue?vue&type=template&id=194b91e2","dependencies":[{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/src/components/schoolYears.vue","mtime":1632529788567},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/babel-loader/lib/index.js","mtime":1632346213603},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632346230877},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/students/node_modules/vue-loader-v16/dist/index.js","mtime":1632346227724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPCEtLSA8ZGl2IGNsYXNzPSJncmlkIGdyaWQtY29scy0zIGdhcC00Ij4KICAgICAgPGRpdiB2LWZvcj0iaXRlbSBpbiBpdGVtcyIgOmtleT0iaXRlbS5pZCIgY2xhc3M9InNoYWRvdy1zbSI+CiAgICAgIDxoMj57eyBpdGVtLnRpdGxlIH19PC9oMj4KICAgICAgPHA+e3sgaXRlbS5kZXNjIH19PC9wPgogICAgPC9kaXY+CiAgPC9kaXY+IC0tPgogIDxkaXYgY2xhc3M9ImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTMgbWQ6Z2FwLTMiPgogICAgPGRpdiB2LWZvcj0ieWVhciBpbiB5ZWFycyIgOmtleT0ieWVhciI+CiAgICAgIDxyb3V0ZXItbGluawogICAgICAgIDp0bz0ieyBuYW1lOiAnc3VtbWFyaXplJywgcGFyYW1zOiB7IHllYXI6IHllYXIgfSB9IgogICAgICAgIGNsYXNzPSIKICAgICAgICAgIHRleHQtc2Vjb25kYXJ5LTUwMAogICAgICAgICAgbWQ6Ymctc2Vjb25kYXJ5LTUwMCBtZDp0ZXh0LWdyYXktNTAgbWQ6cm91bmRlZC1tZCBtZDpwLTMKICAgICAgICAgIHctMjQKICAgICAgICAgIG1kOnRleHQtY2VudGVyCiAgICAgICAgICBpbmxpbmUtYmxvY2sKICAgICAgICAiCiAgICAgICAgPnt7IHllYXIgfX08L3JvdXRlci1saW5rCiAgICAgID4KICAgIDwvZGl2PgogIDwvZGl2Pgo="},{"version":3,"sources":["/Users/marceline/Dropbox/ssnull/vue-apps/students/src/components/schoolYears.vue"],"names":[],"mappings":"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","file":"/Users/marceline/Dropbox/ssnull/vue-apps/students/src/components/schoolYears.vue","sourceRoot":"","sourcesContent":["<template>\n  <!-- <div class=\"grid grid-cols-3 gap-4\">\n      <div v-for=\"item in items\" :key=\"item.id\" class=\"shadow-sm\">\n      <h2>{{ item.title }}</h2>\n      <p>{{ item.desc }}</p>\n    </div>\n  </div> -->\n  <div class=\"grid grid-cols-1 md:grid-cols-3 md:gap-3\">\n    <div v-for=\"year in years\" :key=\"year\">\n      <router-link\n        :to=\"{ name: 'summarize', params: { year: year } }\"\n        class=\"\n          text-secondary-500\n          md:bg-secondary-500 md:text-gray-50 md:rounded-md md:p-3\n          w-24\n          md:text-center\n          inline-block\n        \"\n        >{{ year }}</router-link\n      >\n    </div>\n  </div>\n</template>\n\n<script>\n//import axios from \"axios\";\n\nexport default {\n  name: \"schoolYears\",\n  data() {\n    return {\n      items: [\n        {\n          id: 1,\n          title: \"One\",\n          desc: \"See One Now\",\n        },\n        {\n          id: 2,\n          title: \"Two\",\n          desc: \"See Two Now\",\n        },\n        {\n          id: 3,\n          title: \"Three\",\n          desc: \"See Three Now\",\n        },\n      ],\n      students: [],\n      years: [],\n      yearlyData: {},\n    };\n  },\n  created() {\n    //axios.get(\"http://apitest.sertifi.net/api/Students\").then((students) => {\n    let students = {};\n    students.data = [\n      {\n        Id: 1,\n        Name: \"Jack\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.4, 2.1, 1.2, 3.6],\n      },\n      {\n        Id: 2,\n        Name: \"Jill\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [3.3, 2.3, 1.1, 3.7],\n      },\n      {\n        Id: 3,\n        Name: \"Bob\",\n        StartYear: 2010,\n        EndYear: 2012,\n        GPARecord: [2.3, 2.5, 2.8],\n      },\n      {\n        Id: 4,\n        Name: \"Alice\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.6, 2.9, 3.4, 3.7],\n      },\n      {\n        Id: 5,\n        Name: \"Eve\",\n        StartYear: 2012,\n        EndYear: 2015,\n        GPARecord: [3.3, 2.5, 1.1, 3.7],\n      },\n      {\n        Id: 6,\n        Name: \"Malcom\",\n        StartYear: 2011,\n        EndYear: 2014,\n        GPARecord: [3.8, 2.7, 1.1, 3.7],\n      },\n      {\n        Id: 7,\n        Name: \"Don\",\n        StartYear: 2009,\n        EndYear: 2012,\n        GPARecord: [3.1, 2.1, 1.1, 3.7],\n      },\n      {\n        Id: 8,\n        Name: \"Mike\",\n        StartYear: 2009,\n        EndYear: 2011,\n        GPARecord: [3.6, 2.2, 1.1],\n      },\n      {\n        Id: 9,\n        Name: \"Stacy\",\n        StartYear: 2015,\n        EndYear: 2016,\n        GPARecord: [3.3, 2.3],\n      },\n      {\n        Id: 10,\n        Name: \"Safron\",\n        StartYear: 2016,\n        EndYear: 2016,\n        GPARecord: [3.3],\n      },\n      {\n        Id: 11,\n        Name: \"Bill\",\n        StartYear: 2012,\n        EndYear: 2015,\n        GPARecord: [3.6, 2.4, 2.3, 3.7],\n      },\n      {\n        Id: 12,\n        Name: \"Quin\",\n        StartYear: 2008,\n        EndYear: 2012,\n        GPARecord: [3.3, 2.7, 1.1, 3.7, 2.4],\n      },\n      {\n        Id: 13,\n        Name: \"Erin\",\n        StartYear: 2008,\n        EndYear: 2011,\n        GPARecord: [3.8, 2.9, 1.1, 3.7],\n      },\n      {\n        Id: 14,\n        Name: \"Sharon\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.6, 2.3, 1.1, 3.7],\n      },\n      {\n        Id: 15,\n        Name: \"Lilly\",\n        StartYear: 2011,\n        EndYear: 2014,\n        GPARecord: [1.0, 2.5, 1.1, 3.8],\n      },\n      {\n        Id: 16,\n        Name: \"Inara\",\n        StartYear: 2004,\n        EndYear: 2007,\n        GPARecord: [3.3, 2.8, 1.1, 3.7],\n      },\n      {\n        Id: 17,\n        Name: \"Harry\",\n        StartYear: 2005,\n        EndYear: 2007,\n        GPARecord: [2.4, 2.9, 1.1],\n      },\n      {\n        Id: 18,\n        Name: \"Emma\",\n        StartYear: 2007,\n        EndYear: 2011,\n        GPARecord: [3.8, 2.6, 1.6, 3.7, 2.8],\n      },\n      {\n        Id: 19,\n        Name: \"Sharon\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [3.5, 2.8, 1.1, 3.7],\n      },\n      {\n        Id: 20,\n        Name: \"Uday\",\n        StartYear: 2002,\n        EndYear: 2005,\n        GPARecord: [3.8, 2.5, 1.8, 3.7],\n      },\n      {\n        Id: 21,\n        Name: \"Ross\",\n        StartYear: 2003,\n        EndYear: 2006,\n        GPARecord: [3.3, 2.7, 1.5, 3.7],\n      },\n      {\n        Id: 22,\n        Name: \"Michael\",\n        StartYear: 2001,\n        EndYear: 2004,\n        GPARecord: [3.7, 2.5, 1.4, 3.7],\n      },\n      {\n        Id: 23,\n        Name: \"Nick\",\n        StartYear: 2001,\n        EndYear: 2004,\n        GPARecord: [3.4, 2.0, 1.0, 3.7],\n      },\n      {\n        Id: 24,\n        Name: \"Laura\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [1.5, 2.7, 3.2, 4.0],\n      },\n      {\n        Id: 25,\n        Name: \"Kevin\",\n        StartYear: 2000,\n        EndYear: 2003,\n        GPARecord: [3.3, 2.4, 1.6, 3.7],\n      },\n    ];\n\n    let studentData = students.data;\n    const yearsData = [\n      ...new Set(\n        studentData.reduce(\n          (arr, item) => arr.concat(item.StartYear, item.EndYear).sort(),\n          []\n        )\n      ),\n    ];\n\n    let keyedGPA = {};\n\n    studentData.forEach((student) =>\n      student.GPARecord.forEach(\n        // instead of building a really big keyedGPA, it would be better to add it to the for loop here.\n        (v, i, arr) => (keyedGPA[`GPAfor${student.StartYear + i}`] = v)\n      )\n    );\n    console.log(keyedGPA);\n\n    console.log(studentData);\n    console.log(yearsData);\n\n    let obj = {};\n    obj[\"foo\"] = \"bar\";\n\n    let colors = [\"green\", \"yellow\", \"blue\", \"purple\"];\n    obj[\"colors\"] = colors;\n\n    let betterColors = {};\n\n    obj[\"colors\"].forEach((color, i) => {\n      betterColors[2000 + i] = \"test\";\n    });\n\n    obj[\"colors\"].splice(0);\n    obj[\"colors\"] = betterColors;\n\n    console.log(obj);\n  },\n};\n</script>\n"]}]}