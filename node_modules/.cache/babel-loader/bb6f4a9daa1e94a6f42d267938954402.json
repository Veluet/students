{"remainingRequest":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/thread-loader/dist/cjs.js!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/babel-loader/lib/index.js!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/views/Home.vue?vue&type=template&id=4f2d0ca0","dependencies":[{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/views/Home.vue","mtime":1632751835055},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/thread-loader/dist/cjs.js","mtime":1632346226607},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/babel-loader/lib/index.js","mtime":1632346213603},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632346230877},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/index.js","mtime":1632346227724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJob21lIGNvbnRhaW5lciBteC1hdXRvIHB4LTQiLAogIGlkOiAidG9wIgp9Owp2YXIgX2hvaXN0ZWRfMiA9IHsKICBjbGFzczogIm1kOmdyaWQgbWQ6Z3JpZC1mbG93LWNvbCBtZDpncmlkLWNvbHMtMiBtZDpnYXAtMiIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9tYWluX2hlYWRlciA9IF9yZXNvbHZlQ29tcG9uZW50KCJtYWluLWhlYWRlciIpOwoKICB2YXIgX2NvbXBvbmVudF9zY2hvb2xfeWVhcnMgPSBfcmVzb2x2ZUNvbXBvbmVudCgic2Nob29sLXllYXJzIik7CgogIHZhciBfY29tcG9uZW50X3JvdXRlcl92aWV3ID0gX3Jlc29sdmVDb21wb25lbnQoInJvdXRlci12aWV3Iik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9tYWluX2hlYWRlciksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImRpdiIsIF9ob2lzdGVkXzIsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9zY2hvb2xfeWVhcnMsIHsKICAgIHN0dWRlbnRzOiAkZGF0YS5zdHVkZW50cywKICAgIHllYXJzOiAkZGF0YS55ZWFycywKICAgIHllYXJSb3dzOiAkZGF0YS55ZWFyUm93cwogIH0sIG51bGwsIDgsIFsic3R1ZGVudHMiLCAieWVhcnMiLCAieWVhclJvd3MiXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X3JvdXRlcl92aWV3LCB7CiAgICB5ZWFyUm93czogJGRhdGEueWVhclJvd3MKICB9LCBudWxsLCA4LCBbInllYXJSb3dzIl0pXSldKTsKfQ=="},{"version":3,"sources":["/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/views/Home.vue"],"names":[],"mappings":";;AACO,EAAA,KAAK,EAAC,6B;AAA8B,EAAA,EAAE,EAAC;;;AAErC,EAAA,KAAK,EAAC;;;;;;;;;uBAFb,mBAAA,CAMM,KANN,EAAA,UAAA,EAMM,CALJ,YAAA,CAAe,sBAAf,CAKI,EAJJ,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,CAFJ,YAAA,CAAyE,uBAAzE,EAAyE;AAA1D,IAAA,QAAQ,EAAE,KAAA,CAAA,QAAgD;AAArC,IAAA,KAAK,EAAE,KAAA,CAAA,KAA8B;AAAtB,IAAA,QAAQ,EAAE,KAAA,CAAA;AAAY,GAAzE,E,IAAA,E,CAAA,E,iCAAA,CAEI,EADJ,YAAA,CAAoC,sBAApC,EAAoC;AAAtB,IAAA,QAAQ,EAAE,KAAA,CAAA;AAAY,GAApC,EAAgC,IAAhC,EAAgC,CAAhC,EAAgC,CAAA,UAAA,CAAhC,CACI,CAHN,CAII,CANN,C","sourcesContent":["<template>\n  <div class=\"home container mx-auto px-4\" id=\"top\">\n    <main-header />\n    <div class=\"md:grid md:grid-flow-col md:grid-cols-2 md:gap-2\">\n      <school-years :students=\"students\" :years=\"years\" :yearRows=\"yearRows\" />\n      <router-view :yearRows=\"yearRows\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport mainHeader from \"../components/mainHeader\";\nimport schoolYears from \"../components/schoolYears\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    mainHeader,\n    schoolYears,\n  },\n  props: {\n    year: String,\n  },\n  data() {\n    return {\n      students: [],\n      years: [],\n      yearRows: {},\n    };\n  },\n  created() {\n    console.log(process.env.VUE_APP_ENVIRONMENT);\n    const apiUrl =\n      process.env.VUE_APP_ENVIRONMENT === \"production\"\n        ? \"api/Students.json\"\n        : \"http://apitest.sertifi.net/api/Students\";\n\n    axios.get(apiUrl).then((students) => {\n      // Move response into local variable.\n      let studentData = students.data;\n\n      /* Start: De-normalize time! */\n\n      // De-normalizing: The GPA Record Array in the students.data\n      // New: Build a list of all Years\n      // Adding:  Attendence by year for each student in students.data\n\n      // Declare yearRows; used to return calculated values.\n      let yearRows = {};\n\n      // Declare allYears; used to generate content.\n      let allYears = [];\n\n      // Declare attendence by year\n      // {\n      //   \"2001\": {\n      //     \"students\": [{\"john\" : {\"rollingGPA:\" 5.0}],\n      //     \"rollingGPA\": 5.0,1\n      //     }\n      // }\n\n      studentData.forEach((student) => {\n        const thisStudent = student;\n        const thisStudentName = thisStudent.Name;\n        let attended = [];\n\n        student.GPARecord.forEach((gpa, i) => {\n          const currentYear = thisStudent.StartYear + i;\n\n          if (!allYears.includes(currentYear)) allYears.push(currentYear);\n          attended.push(currentYear);\n\n          // Create the year entry if it doesn't exist in yearRows.\n          if (!(currentYear in yearRows)) {\n            yearRows[currentYear] = {\n              students: [thisStudentName],\n              gpas: [gpa],\n              studentRows: {},\n            };\n\n            yearRows[currentYear].studentRows[thisStudentName] = {\n              Name: thisStudentName,\n              GPA: gpa,\n            };\n            return;\n          }\n\n          // Create the student entry if it doesn't exist in yearRows\n          if (!yearRows[currentYear].students.includes(thisStudent.Name)) {\n            yearRows[currentYear].students.push(thisStudent.Name);\n\n            yearRows[currentYear].studentRows[thisStudentName] = {\n              Name: thisStudentName,\n              GPA: gpa,\n            };\n          }\n\n          // Create the gpa entry, it doesn't exist yet!\n          yearRows[currentYear].gpas.push(gpa);\n        });\n\n        student.averageGPA = student.GPARecord.reduce(\n          (a, v, i) => (a * i + v) / (i + 1)\n        );\n\n        student.attended = attended;\n      });\n\n      // Sort all years from oldest to newest.\n      this.years = allYears.sort();\n\n      for (const year in yearRows) {\n        yearRows[year].attendence = yearRows[year].students.length;\n\n        const averageGPA = yearRows[year].gpas.reduce(\n          (a, v, i) => (a * i + v) / (i + 1)\n        );\n\n        yearRows[year].averageGPA =\n          Math.round((averageGPA + Number.EPSILON) * 100) / 100;\n      }\n\n      this.yearRows = yearRows;\n\n      /* End: De-normalize time! */\n    });\n  },\n};\n</script>\n"],"sourceRoot":""}]}