{"remainingRequest":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/babel-loader/lib/index.js!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/templateLoader.js??ref--7!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/App.vue?vue&type=template&id=7ba5bd90","dependencies":[{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/App.vue","mtime":1632703484749},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/babel-loader/lib/index.js","mtime":1632346213603},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1632346230877},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/cache-loader/dist/cjs.js","mtime":1632346226385},{"path":"/Users/marceline/Dropbox/ssnull/vue-apps/github/students/node_modules/vue-loader-v16/dist/index.js","mtime":1632346227724}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVGV4dFZOb2RlIGFzIF9jcmVhdGVUZXh0Vk5vZGUsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIHdpdGhDdHggYXMgX3dpdGhDdHgsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2sgYXMgX2NyZWF0ZUVsZW1lbnRCbG9jayB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGlkOiAibmF2Igp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiSG9tZSIpOwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiIHwgIik7Cgp2YXIgX2hvaXN0ZWRfNCA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCJBYm91dCIpOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9yb3V0ZXJfbGluayA9IF9yZXNvbHZlQ29tcG9uZW50KCJyb3V0ZXItbGluayIpOwoKICB2YXIgX2NvbXBvbmVudF9yb3V0ZXJfdmlldyA9IF9yZXNvbHZlQ29tcG9uZW50KCJyb3V0ZXItdmlldyIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCBudWxsLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X3JvdXRlcl9saW5rLCB7CiAgICB0bzogewogICAgICBuYW1lOiAnSG9tZScKICAgIH0KICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbX2hvaXN0ZWRfMl07CiAgICB9KSwKICAgIF86IDEKICAgIC8qIFNUQUJMRSAqLwoKICB9KSwgX2hvaXN0ZWRfMywgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfcm91dGVyX2xpbmssIHsKICAgIHRvOiB7CiAgICAgIG5hbWU6ICdBYm91dCcKICAgIH0KICB9LCB7CiAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbX2hvaXN0ZWRfNF07CiAgICB9KSwKICAgIF86IDEKICAgIC8qIFNUQUJMRSAqLwoKICB9KV0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9yb3V0ZXJfdmlldyldKTsKfQ=="},{"version":3,"sources":["/Users/marceline/Dropbox/ssnull/vue-apps/github/students/src/App.vue"],"names":[],"mappings":";;AAES,EAAA,EAAE,EAAC;;;+CAC8B,M;;+CAAkB,K;;+CACjB,O;;;;;;;uBAHzC,mBAAA,CAOM,KAPN,EAOM,IAPN,EAOM,CANJ,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,CAFJ,YAAA,CAAsD,sBAAtD,EAAsD;AAAxC,IAAA,EAAE,EAAE;AAAA,MAAA,IAAA,EAAA;AAAA;AAAoC,GAAtD,EAAkC;sBAAE;AAAA,aAAI,C,UAAA,CAAJ;AAAA,K,CAAF;;;;AAAA,GAAlC,CAEI,E,UAAA,EADJ,YAAA,CAAwD,sBAAxD,EAAwD;AAA1C,IAAA,EAAE,EAAE;AAAA,MAAA,IAAA,EAAA;AAAA;AAAsC,GAAxD,EAAmC;sBAAE;AAAA,aAAK,C,UAAA,CAAL;AAAA,K,CAAF;;;;AAAA,GAAnC,CACI,CAHN,CAMI,EADJ,YAAA,CAAe,sBAAf,CACI,CAPN,C","sourcesContent":["<template>\n  <div>\n    <div id=\"nav\">\n      <router-link :to=\"{ name: 'Home' }\">Home</router-link> |\n      <router-link :to=\"{ name: 'About' }\">About</router-link>\n    </div>\n\n    <router-view />\n  </div>\n</template>\n\n<style lang=\"scss\">\n$size-5: clamp(3.27rem, 2.75rem + 2.56vw, 4.58rem);\n$size-4: clamp(2.72rem, 2.36rem + 1.83vw, 3.66rem);\n$size-3: clamp(2.27rem, 2.01rem + 1.29vw, 2.93rem);\n$size-2: clamp(1.89rem, 1.71rem + 0.89vw, 2.34rem);\n$size-1: clamp(1.58rem, 1.46rem + 0.59vw, 1.88rem);\n$size-0: clamp(1.31rem, 1.24rem + 0.37vw, 1.5rem);\n$size--1: clamp(1.09rem, 1.05rem + 0.21vw, 1.2rem);\n$size--2: clamp(0.91rem, 0.89rem + 0.1vw, 0.96rem);\n\nbody {\n  font-size: $size--2;\n}\n\np {\n  font-size: $size--1;\n}\n\nh1 {\n  font-size: $size-3 !important;\n}\n\nh2 {\n  font-size: $size-2 !important;\n}\n\nh3 {\n  font-size: $size-1 !important;\n}\n</style>\n\n<script>\n//import axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      students: [],\n      years: [],\n      yearlyData: {},\n    };\n  },\n  created() {\n    //axios.get(\"http://apitest.sertifi.net/api/Students\").then((students) => {\n    let students = {};\n    students.data = [\n      {\n        Id: 1,\n        Name: \"Jack\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.4, 2.1, 1.2, 3.6],\n      },\n      {\n        Id: 2,\n        Name: \"Jill\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [3.3, 2.3, 1.1, 3.7],\n      },\n      {\n        Id: 3,\n        Name: \"Bob\",\n        StartYear: 2010,\n        EndYear: 2012,\n        GPARecord: [2.3, 2.5, 2.8],\n      },\n      {\n        Id: 4,\n        Name: \"Alice\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.6, 2.9, 3.4, 3.7],\n      },\n      {\n        Id: 5,\n        Name: \"Eve\",\n        StartYear: 2012,\n        EndYear: 2015,\n        GPARecord: [3.3, 2.5, 1.1, 3.7],\n      },\n      {\n        Id: 6,\n        Name: \"Malcom\",\n        StartYear: 2011,\n        EndYear: 2014,\n        GPARecord: [3.8, 2.7, 1.1, 3.7],\n      },\n      {\n        Id: 7,\n        Name: \"Don\",\n        StartYear: 2009,\n        EndYear: 2012,\n        GPARecord: [3.1, 2.1, 1.1, 3.7],\n      },\n      {\n        Id: 8,\n        Name: \"Mike\",\n        StartYear: 2009,\n        EndYear: 2011,\n        GPARecord: [3.6, 2.2, 1.1],\n      },\n      {\n        Id: 9,\n        Name: \"Stacy\",\n        StartYear: 2015,\n        EndYear: 2016,\n        GPARecord: [3.3, 2.3],\n      },\n      {\n        Id: 10,\n        Name: \"Safron\",\n        StartYear: 2016,\n        EndYear: 2016,\n        GPARecord: [3.3],\n      },\n      {\n        Id: 11,\n        Name: \"Bill\",\n        StartYear: 2012,\n        EndYear: 2015,\n        GPARecord: [3.6, 2.4, 2.3, 3.7],\n      },\n      {\n        Id: 12,\n        Name: \"Quin\",\n        StartYear: 2008,\n        EndYear: 2012,\n        GPARecord: [3.3, 2.7, 1.1, 3.7, 2.4],\n      },\n      {\n        Id: 13,\n        Name: \"Erin\",\n        StartYear: 2008,\n        EndYear: 2011,\n        GPARecord: [3.8, 2.9, 1.1, 3.7],\n      },\n      {\n        Id: 14,\n        Name: \"Sharon\",\n        StartYear: 2013,\n        EndYear: 2016,\n        GPARecord: [3.6, 2.3, 1.1, 3.7],\n      },\n      {\n        Id: 15,\n        Name: \"Lilly\",\n        StartYear: 2011,\n        EndYear: 2014,\n        GPARecord: [1.0, 2.5, 1.1, 3.8],\n      },\n      {\n        Id: 16,\n        Name: \"Inara\",\n        StartYear: 2004,\n        EndYear: 2007,\n        GPARecord: [3.3, 2.8, 1.1, 3.7],\n      },\n      {\n        Id: 17,\n        Name: \"Harry\",\n        StartYear: 2005,\n        EndYear: 2007,\n        GPARecord: [2.4, 2.9, 1.1],\n      },\n      {\n        Id: 18,\n        Name: \"Emma\",\n        StartYear: 2007,\n        EndYear: 2011,\n        GPARecord: [3.8, 2.6, 1.6, 3.7, 2.8],\n      },\n      {\n        Id: 19,\n        Name: \"Sharon\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [3.5, 2.8, 1.1, 3.7],\n      },\n      {\n        Id: 20,\n        Name: \"Uday\",\n        StartYear: 2002,\n        EndYear: 2005,\n        GPARecord: [3.8, 2.5, 1.8, 3.7],\n      },\n      {\n        Id: 21,\n        Name: \"Ross\",\n        StartYear: 2003,\n        EndYear: 2006,\n        GPARecord: [3.3, 2.7, 1.5, 3.7],\n      },\n      {\n        Id: 22,\n        Name: \"Michael\",\n        StartYear: 2001,\n        EndYear: 2004,\n        GPARecord: [3.7, 2.5, 1.4, 3.7],\n      },\n      {\n        Id: 23,\n        Name: \"Nick\",\n        StartYear: 2001,\n        EndYear: 2004,\n        GPARecord: [3.4, 2.0, 1.0, 3.7],\n      },\n      {\n        Id: 24,\n        Name: \"Laura\",\n        StartYear: 2010,\n        EndYear: 2013,\n        GPARecord: [1.5, 2.7, 3.2, 4.0],\n      },\n      {\n        Id: 25,\n        Name: \"Kevin\",\n        StartYear: 2000,\n        EndYear: 2003,\n        GPARecord: [3.3, 2.4, 1.6, 3.7],\n      },\n    ];\n\n    // Move response into local variable.\n    let studentData = students.data;\n\n    /* This section won't work, possible to add years that don't actually have attendence. */\n    // // Find the earliest start year and latest end year.\n    // // Reducer returns all years, which has to be done for both start and end\n    // const arrYearSpan = studentData.reduce(\n    //   (accumulator, currentValue) => {\n    //     return [\n    //       Math.min(currentValue, accumulator[0]),\n    //       Math.max(currentValue, accumulator[1]),\n    //     ];\n    //   },\n    //   [Number.MAX_VALUE, Number.MIN_VALUE]\n    // );\n    // console.log(arrYearSpan);\n\n    // // Build an array of all unique plausable years\n    // const range = (start, stop, step) =>\n    //   Array.from(\n    //     { length: (stop - start) / step + 1 },\n    //     (_, i) => start + i * step\n    //   );\n\n    // const allYears = range(arrYearSpan[0], arrYearSpan[1], 1);\n    // console.log(allYears);\n\n    // const yearsData = [\n    //   ...new Set(\n    //     studentData.reduce(\n    //       (arr, item) => arr.concat(item.StartYear, item.EndYear).sort(),\n    //       []\n    //     )\n    //   ),\n    // ];\n    /* */\n\n    /* Start: De-normalize time! */\n\n    // De-normalizing: The GPA Record Array in the students.data\n    // New: Build a list of all Years\n    // Adding:  Attendence by year for each student in students.data\n\n    // Declare yearlyData; used to return calculated values.\n    let yearlyData = {};\n\n    // Declare allYears; used to generate content.\n    let allYears = [];\n\n    // Declare attendence by year\n    // It will be easier to interpret if this seperate from allYears.\n    // {\n    //   \"2001\": {\n    //     \"students\": [\"john\",\"jane\"],\n    //     \"gpas\": 5.0,1\n    //     }\n    // }\n\n    studentData.forEach((student) => {\n      let thisStudent = student;\n      let denormalizedGPA = {};\n      let attended = [];\n\n      student.GPARecord.forEach((gpa, i) => {\n        const currentYear = thisStudent.StartYear + i;\n\n        // Might not need denormalized GPA in students.data when it is placed into yearlyData.\n        denormalizedGPA[currentYear] = gpa;\n\n        if (!allYears.includes(currentYear)) allYears.push(currentYear);\n        attended.push(currentYear);\n\n        // Create the year entry if it doesn't exist in yearlyData.\n        if (!(currentYear in yearlyData)) {\n          yearlyData[currentYear] = {\n            students: [thisStudent.Name],\n            gpas: [gpa],\n          };\n          return;\n        }\n\n        // Create the student entry if it doesn't exist in yearlyData\n        if (!yearlyData[currentYear].students.includes(thisStudent.Name)) {\n          yearlyData[currentYear].students.push(thisStudent.Name);\n        }\n\n        // Create the gpa entry, it doesn't exist yet!\n        yearlyData[currentYear].gpas.push(gpa);\n      });\n\n      student.averageGPA = student.GPARecord.reduce(\n        (a, v, i) => (a * i + v) / (i + 1)\n      );\n\n      //student.GPARecord = denormalizedGPA;  // won't need this at this time.\n\n      student.attended = attended;\n      // console.log(denormalizedGPA);\n    });\n\n    // Sort all years from oldest to newest.\n    this.years = allYears.sort();\n\n    for (const year in yearlyData) {\n      yearlyData[year].attendence = yearlyData[year].students.length;\n\n      const averageGPA = yearlyData[year].gpas.reduce(\n        (a, v, i) => (a * i + v) / (i + 1)\n      );\n\n      yearlyData[year].averageGPA =\n        Math.round((averageGPA + Number.EPSILON) * 100) / 100;\n    }\n\n    this.yearlyData = yearlyData;\n\n    console.log(yearlyData);\n    console.log(studentData);\n\n    /* End: De-normalize time! */\n\n    // const inventory = [\n    //   { name: \"apples\", quantity: 2 },\n    //   { name: \"bananas\", quantity: 0 },\n    //   { name: \"cherries\", quantity: 5 },\n    // ];\n\n    // const result = yearlyData.find(({ year }) => year === \"2016\");\n\n    // console.log(result); // { name: 'cherries', quantity: 5 }\n\n    // console.log(allYears);\n    // console.log(studentData);\n\n    // /* This is how the above de-normalization works.\n    // let obj = {};\n    // obj[\"foo\"] = \"bar\";\n\n    // let colors = [\"green\", \"yellow\", \"blue\", \"purple\"];\n    // obj[\"colors\"] = colors;\n\n    // let betterColors = {};\n\n    // obj[\"colors\"].forEach((color, i) => {\n    //   betterColors[2000 + i] = \"test\";\n    // });\n\n    // obj[\"colors\"].splice(0);\n    // obj[\"colors\"] = betterColors;\n\n    // console.log(obj);\n    // /* */\n\n    let okay = \"\";\n  },\n};\n</script>\n"],"sourceRoot":""}]}